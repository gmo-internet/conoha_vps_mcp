# stagingブランチへのpushでstaging用のパッケージのリリース
name: Publish to Private GitHub Packages

on:
  pull_request:
    types: [closed]
    branches:
      - staging
jobs:
  publish:
    if: github.repository == 'gmo-internet/priv_conoha_vps_mcp' && github.event.pull_request.merged == true
    runs-on: ubuntu-24.04

    permissions:
      contents: write
      packages: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # 1) ソース取得
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      # 2) ブランチ名からバージョン抽出
      - name: Extract version from branch name
        id: extract
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          if [[ "$BRANCH_NAME" =~ ^release\/(v[0-9]+\.[0-9]+\.[0-9]?)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Not a release branch. Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      # 3) タグ付け
      - name: Tag and push
        if: success() && steps.extract.outputs.skip != 'true'
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git fetch --tags
          git tag ${{ steps.extract.outputs.VERSION }}
          git push origin ${{ steps.extract.outputs.VERSION }}

      # 4) Node セットアップ
      - name: Setup Node.js
        if: success() && steps.extract.outputs.skip != 'true'
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "22.18.0"
          registry-url: "https://npm.pkg.github.com"
          scope: "@gmo-internet"

      # 5) 依存インストール
      - name: Install dependencies
        if: success() && steps.extract.outputs.skip != 'true'
        run: npm ci

      # 6) ビルド
      - name: Build project
        if: success() && steps.extract.outputs.skip != 'true'
        run: npm run build

      # 7) DXTファイルのビルド
      - name: Build dxt
        if: success() && steps.extract.outputs.skip != 'true'
        run: npm run build:dxt

      # 8) Private用のパッケージ名調整
      - name: Set package name for private packages
        if: success() && steps.extract.outputs.skip != 'true'
        run: |
          VERSION='${{ steps.extract.outputs.VERSION }}'
          npm pkg set name="@gmo-internet/priv-conoha-vps-mcp"

      # 9) Release note作成
      - name: Generate release note
        if: success() && steps.extract.outputs.skip != 'true'
        run: gh release create ${{ steps.extract.outputs.VERSION }} --title ${{ steps.extract.outputs.VERSION }}

      # 10) DXTファイルのアップロード  
      - name: Add dxt file to release note
        if: success() && steps.extract.outputs.skip != 'true'
        run: gh release upload ${{ steps.extract.outputs.VERSION }} priv_conoha_vps_mcp.dxt --clobber

      # 11) 公開
      - name: Publish to GitHub Packages
        if: success() && steps.extract.outputs.skip != 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
